

#AWS Bill - Current Month Cost until Now
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=StatementTotal | eval date_month=strftime(_time, "%Y-%m") | eval current_month=strftime(now(), "%Y-%m") | where date_month=current_month | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode

#AWS Bill - Current Month Cost until Now by Linked Account
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=AccountTotal | eval date_month=strftime(_time, "%Y-%m") | eval current_month=strftime(now(), "%Y-%m") | where date_month=current_month | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode by LinkedAccount


#AWS Bill - Current Month Cost until Now by Service
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=LinkedLineItem | eval date_month=strftime(_time, "%Y-%m") | eval current_month=strftime(now(), "%Y-%m") | where date_month=current_month | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode by ProductName


#AWS Bill - Daily Cost through Last Month - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(BlendedCost) as TotalCost


#AWS Bill - Daily Cost through Last Month - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(UnBlendedCost) as TotalCost



#AWS Bill - Daily Cost through Last Month by Linked ACCOUNT - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(BlendedCost) as TotalCost by LinkedAccount limit=20


#AWS Bill - Daily Cost through Last Month by Linked ACCOUNT- Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(UnBlendedCost) as TotalCost by LinkedAccount limit=20


#AWS Bill - Daily Cost through Last Month by Region - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  timechart span=1day sum(BlendedCost) as TotalCost by AvailabilityZone limit=20


#AWS Bill - Daily Cost through Last Month by Region - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  timechart span=1day sum(UnBlendedCost) as TotalCost by AvailabilityZone limit=20

#AWS Bill - Daily Cost through Last Month by Service - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(BlendedCost) as TotalCost by ProductName limit=20

#AWS Bill - Daily Cost through Last Month by Service - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |   timechart span=1day sum(UnBlendedCost) as TotalCost by ProductName limit=20

#AWS Bill - Detailed Cost Latest Snapshot
eventtype=aws_billing_detail_report  [search eventtype=aws_billing_detail_report RecordType=StatementTotal | dedup report_month sortby -_time | return 1000 S3KeyLastModified]


#AWS Bill - Monthly Cost
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=StatementTotal | timechart span=1mon sum(TotalCost) as TotalCost

#AWS Bill - Monthly Cost by Linked ACCOUNT#1
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=AccountTotal | timechart span=1mon sum(TotalCost) by LinkedAccount limit=20

#AWS Bill - Monthly Cost by Service
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=LinkedLineItem  | timechart span=1mon sum(TotalCost) as TotalCost by ProductName limit=20


#AWS Bill - Monthly Cost through Last Month by Region - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  timechart span=1mon sum(BlendedCost) as TotalCost by AvailabilityZone limit=20

#AWS Bill - Monthly Cost through Last Month by Region - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  timechart span=1mon sum(UnBlendedCost) as TotalCost by AvailabilityZone limit=20

#AWS Bill - Monthly Latest Snapshot
eventtype=aws_billing_monthly_report [search eventtype=aws_billing_monthly_report | dedup report_month sortby -_time | return 1000 S3KeyLastModified]

#AWS Bill - Total Cost through Last Month by Region - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  stats sum(BlendedCost) as TotalCost by AvailabilityZone


#AWS Bill - Total Cost through Last Month by Region - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  stats sum(UnBlendedCost) as TotalCost by AvailabilityZone


#AWS Bill - Total Cost until Now
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=StatementTotal | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode

#AWS Bill - Total Cost until Now by Linked ACCOUNT
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=StatementTotal | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode

#AWS Bill - Total Cost until Now by Service
| savedsearch "AWS Bill - Monthly Latest Snapshot" | search RecordType=LinkedLineItem | stats sum(TotalCost) as TotalCost, first(CurrencyCode) as CurrencyCode by ProductName

#AWS Bill - Total Daytime Cost through Last Month - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  eval date_hour=strftime(_time, "%H") | search (date_hour>=7 AND date_hour<=17) | stats sum(BlendedCost) as TotalCost

#AWS Bill - Total Daytime Cost through Last Month - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  eval date_hour=strftime(_time, "%H") | search (date_hour>=7 AND date_hour<=17) | stats sum(UnBlendedCost) as TotalCost

#AWS Bill - Total Nighttime Cost through Last Month - Blended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  eval date_hour=strftime(_time, "%H") | search (date_hour < 7 OR date_hour > 17) | stats sum(BlendedCost) as TotalCost

#AWS Bill - Total Nighttime Cost through Last Month - Unblended
| savedsearch "AWS Bill - Detailed Cost Latest Snapshot" | search RecordType=LineItem |  eval date_hour=strftime(_time, "%H") | search (date_hour < 7 OR date_hour > 17) | stats sum(UnBlendedCost) as TotalCost


#Active CIRT Incident by Phase
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| search phase!=Closed AND assignmentgroup=CIRT
| stats count by phase
| sort - count
| eval phase=phase." (".count.")"

#Active CIRT Incident by SEV
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| fillnull value=None
| search phase!=Closed AND assignmentgroup=CIRT

| stats count by SEV
| sort - count | eval SEV=SEV." (".count.")"

#Active CIRT Incidents by Category
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| search phase!=Closed AND assignmentgroup=CIRT |  stats count by categories 
| sort - count | sort -count | eval categories=categories." (".count.")"

#Active CIRT Incidents by User
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| search phase!=Closed AND assignmentgroup=CIRT
| stats count by Owner
| eval Owner = if(len('Owner') == 0, "None", 'Owner')
| sort - count
| eval Owner=Owner." (".count.")"

#Addon Metadata - Migrate #AWS Accounts
| listawsaccounts | collect `aws-account-index`

#Addon Metadata - Summarize #AWS Inputs
| listawsinputs | collect `aws-input-index`

#AutoFocus - Retrieve Tag Metadata
| panautofocustags


#CIM - Data Model Acceleration Details
| `datamodel("Splunk_Audit", "Datamodel_Acceleration")` | `drop_dm_object_name("Datamodel_Acceleration")` | eval size(MB)=round(size/1048576,1) | eval retention(days)=retention/86400 | eval complete(%)=round(complete*100,1) | sort 100 + datamodel | fieldformat earliest=strftime(earliest, "%m/%d/%Y %H:%M:%S") | fieldformat latest=strftime(latest, "%m/%d/%Y %H:%M:%S") | fields datamodel,app,cron,retention(days),earliest,latest,is_inprogress,complete(%),size(MB),last_error


#CIM - Top Data Model Accelerations By Run Duration
| `datamodel("Splunk_Audit", "Datamodel_Acceleration")` | `drop_dm_object_name("Datamodel_Acceleration")` | join type=outer last_sid [| rest splunk_server=local count=0 /services/search/jobs reportSearch=summarize* | rename sid as last_sid | fields last_sid,runDuration] | sort 100 - runDuration | table datamodel,runDuration


#CIM - Top Data Model Accelerations By Size
| `datamodel("Splunk_Audit", "Datamodel_Acceleration")` | `drop_dm_object_name("Datamodel_Acceleration")` | eval size(MB)=size/1048576 | sort 100 - size | table datamodel,size(MB)


#CIRT Closed Incidents (24h)
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id

| makemv delim="," categories
| search phase=Closed AND categories!="Threat Hunt*" AND assignmentgroup=CIRT
| stats count


#CIRT New Incidents
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| makemv delim="," categories
| search phase!=Closed AND categories!="Threat Hunt*" AND assignmentgroup=CIRT
| stats count

#CIRT Closed Threat Hunts(24)
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id

| makemv delim="," categories
| search phase=Closed AND categories!="Threat Hunt*" AND assignmentgroup=CIRT
| stats count



#CIRT New Threat Hunts
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id

| makemv delim="," categories
| search phase=Closed AND categories="Threat Hunt*" AND assignmentgroup=CIRT
| stats count


#CIRT Open Tickets Total
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| search phase!=Closed AND assignmentgroup=CIRT AND categories="*"
| stats count


#Client Status
`SfeS-client-check-logs`


#Daily Report p_User
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  AND ("pxv116" OR "palmarosa.ventura@equifax.com") | table eventtype _time field2 field3 date date_month date_wday date_mday date_hour date_minute dest_is_expected dvc_pci_domain host s_ip src c_ip field5 field9 s_supplier_ip cs_uri_port cs_username field6 cs_uri_scheme sc_filter_result s_action sc_status action field13 field16 field17 category cs_categories field14 cs_uri_extension cs_method http_method s_supplier_name field8 cs_host dest dest_host cs_uri_path cs_uri_query cs_Referer_ cs_Referer cs_User_Agent_ bytes	 bytes_in sc_bytes	 bytes_out cs_bytes _raw


#Daily Report y_User
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  ("yel1" OR "yesenia.lazo@equifax.com") | table eventtype _time field2 field3 date date_month date_wday date_mday date_hour date_minute dest_is_expected dvc_pci_domain host s_ip src c_ip field5 field9 s_supplier_ip cs_uri_port cs_username field6 cs_uri_scheme sc_filter_result s_action sc_status action field13 field16 field17 category cs_categories field14 cs_uri_extension cs_method http_method s_supplier_name field8 cs_host dest dest_host cs_uri_path cs_uri_query cs_Referer_ cs_Referer cs_User_Agent_ bytes	 bytes_in sc_bytes	 bytes_out cs_bytes _raw


#Daily sinkhole hunt
index=efx_sinkhole
`comment("Temporary field extraction due to index issues")`
| rex field=_raw "Host_Requested\\x22\\s+:\\s+\\x22(?P<Host_Requested>[^\\x22]+)\\x22" offset_field=_extracted_fields_bounds
| rex field=_raw "First_Line\\x22\\s+:\\s+\\x22(?P<First_Line>[^\\x22]+)\\x22" offset_field=_extracted_fields_bounds0
| rex field=_raw "Referrer\\x22\\s+:\\s+\\x22(?P<Referrer>[^\\x22]+)\\x22" offset_field=_extracted_fields_bounds1
| rex field=_raw "src\\x22\\s+:\\s+\\x22(?P<src>[^\\x22]+)\\x22" offset_field=_extracted_fields_bounds2
| join type=left Host_Requested
    [| mispgetioc eventid=11856
| rename misp_domain AS Host_Requested
| rex field=misp_value "https?://(?<Host_Requested>[^/]*)(?<First_Line>.*$)"
| eval First_Line="*".First_Line."*"
| eval Host_Requested = if(isNull(Host_Requested),misp_other,Host_Requested)
| fields First_Line, Host_Requested, misp_event_id]
`comment("Perform a lookup against the compiled list of wildcard sinkhole entries and ouput useful stuff")`
| lookup misp_wildcard_sinkhole misp_value AS Host_Requested OUTPUTNEW misp_value AS misp_match, misp_value AS wc_misp_value, misp_event_id AS wc_misp_event_id, misp_category AS wc_misp_category, misp_tag AS wc_misp_tag
`comment("use mispsearch to pull back addition attribute metadata from misp, but make sure all Host_Requested have a value, NULLs will break things")`
| fillnull Host_Requested value="-lolwut-"
| mispsearch field=Host_Requested
`comment("Set misp_wildcard to true if there's a value in wc_misp_value. Set cleared to True if the event ID is 11856 (whitelist MISP event)")`
| eval misp_wildcard=if(isNull(wc_misp_value),"False","True")
| eval cleared=if(misp_event_id=11856,"11856",mvfilter(match("11856",misp_event_id)))
| fillnull cleared value="False"
| eval cleared=if(cleared="11856","True","False")
`comment("Combine the wildcard lookup and mispsearch output. If it was found in the wildcard list, ignore everything other than the fact it was a wildcard hit")`
| eval misp_event_id=coalesce(wc_misp_event_id,misp_event_id)
| eval misp_category=coalesce(wc_misp_category,misp_category)
| eval misp_match=coalesce(wc_misp_value,misp_value)
`comment("Parse out the file extension")`
| rex field=First_Line " (?<uri>/[^ \?]*)"
| rex field=uri "(?<file_ext>\..*)"
`comment("Build the table and sort to put most interesting stuff at the top.")`
| table _time, src, Host_Requested, First_Line, file_ext, Referrer, misp_wildcard, misp_match, misp_event_id, misp_category, misp_tag, cleared
| sort +cleared, +misp_wildcard, Host_Requested, src


#EFX-PROD-SYS-ACCESS-WAS
index=efx_os_nix (host=sunapp*) OR (host=offline*) source=/var/log/authlog user!=svc-siem-sunapp auth_status="none" 
| table dvc, user, src_ip, app | rename dvc as "PROD System" user as "User" src_ip as "Source IP" app as "Application Used"

#EPS Dashboard - Average Per Hour Last Week
| tstats count where index=efx_* OR index=wineventlog by _time span=60m
| eval count = count /(60 * 60)

#EPS Dashboard - Avg
| tstats count AS Events WHERE index="efx_*" OR index="wineventlog" BY index _time span=1s
| eval yC = if((relative_time(now(), "-1d@d") < _time) AND (relative_time(now(), "@d") > _time),1,0)
| eval byC = if((relative_time(now(), "-1d@d") < _time) AND (relative_time(now(), "@d") > _time),1,0)
| eval lwC = if((relative_time(now(), "-1d@d") < _time) AND (relative_time(now(), "@d") > _time),1,0)
| stats sum(yC) as yC  sum(byC) as byC  sum(lwC) as lwC sum(eval(if((relative_time(now(), "-1d@d") < _time) AND (relative_time(now(), "@d") > _time),Events,0))) AS Yesterday
sum(eval(if((relative_time(now(), "-2d@d") < _time) AND (relative_time(now(), "-1d@d") > _time),Events,0))) AS BeforeYesterday
sum(eval(if((relative_time(now(), "-8d@d") < _time) AND (relative_time(now(), "-7d@d") > _time),Events,0))) AS lw
BY index
| eval Yesterday = round(Yesterday / yC,0)
| eval BeforeYesterday = round(BeforeYesterday / byC,0)
| eval lw = round(lw / lwC,0)
| fields index Yesterday BeforeYesterday lw
| rename lw AS "Last Week"
| sort - Yesterday

#EPS Dashboard - Max
| tstats count AS Events WHERE index="efx_*" OR index="wineventlog" BY index _time span=1s
| stats max(eval(if((relative_time(now(), "-1d@d") < _time) AND (relative_time(now(), "@d") > _time),Events,0))) AS Yesterday
max(eval(if((relative_time(now(), "-2d@d") < _time) AND (relative_time(now(), "-1d@d") > _time),Events,0))) AS BeforeYesterday
max(eval(if((relative_time(now(), "-8d@d") < _time) AND (relative_time(now(), "-7d@d") > _time),Events,0))) AS lw
BY index
| fields index Yesterday BeforeYesterday lw
| rename lw AS "Last Week"
| sort - Yesterday

#ESS Daily Dashboard - GB Yesterday
index=_internal host=splkdslm101.sec.equifax.com source=*license_usage.log type=Usage
    | eval GB = b/1024/1024/1024
| stats sum(GB) as GB
| eval GB = round(GB,2)

#ESS Daily Dashboard - GB Yesterday All Zones
   | eval GB = b/1024/1024/1024
| stats sum(GB) as GB by pool
| appendpipe 
    [ | eventstats sum(GB) as GB
    | eval pool="total"
    | stats values(GB) as GB by pool]
| eval GB = round(GB,2)
| eval pool=if(pool="auto_generated_pool_enterprise","US-Site",pool) 
| append 
    [| makeresults
    | eval GB =0
    | eval pool="UK-Site"
    | table GB pool]
| append 
    [| makeresults
    | eval GB =0
    | eval pool="IN-Site"
    | table GB pool]
| append 
    [| makeresults
    | eval GB =0
    | eval pool="AU-Site"
    | table GB pool]
| append 
    [| makeresults
    | eval GB =0
    | eval pool="US-Site"
    | table GB pool]
    | stats sum(GB) as GB by pool
    | transpose 0 header_field=pool

#Errors in the last 24 hours
error OR failed OR severe OR ( sourcetype=access_* ( 404 OR 500 OR 503 ) )

#Errors in the last hour
error OR failed OR severe OR ( sourcetype=access_* ( 404 OR 500 OR 503 ) )

#GCP - Access Transparency
index=efx_gcp_cloudaudit AND sourcetype=*gcp*  logName="*access_transparency" 
| rename resource.labels.project_id as Project
| rename jsonPayload.reason{}.detail as "Access Reason"
| rename jsonPayload.location.principalEmployingEntity as "Google Entity"
| rename jsonPayload.accesses{}.methodName as "Service Method"
| rename jsonPayload.accesses{}.resourceName as "Resource"
| eval event="Method: ".'Service Method'." on Resource: ".'Resource'
| stats count as "Total Events" dc(Resource) as "Unique Resources" values("Google Entity") as "Google Entities" values(jsonPayload.product{}) as Products values(event) as Events by Project "Access Reason"

#GCP Projects
index=efx_gcp_cloudaudit | stats count by resource.labels.project_id

#GCP Projects Overview
index=efx_gcp_cloudaudit | lookup gpc_api_translation.csv service_name AS protoPayload.serviceName  OUTPUT api_name | rename resource.labels.project_id as "GCP Project", api_name as "GCP Service" | table "GCP Project", "GCP Service" | sort "GCP Project"

#Generate EFX AD Data
|ldapsearch domain=equifax search="(&(objectclass=user)(sAMAccountName=*)(!(objectClass=computer)))" attrs="sAMAccountName,personalTitle,displayName,givenName,sn,mail,telephoneNumber,mobile,manager,priority,department,whenCreated, employeeID,lastLogonTimestamp,title"
|eval suffix=""
|eval priority="medium"
|eval category="normal"
|eval watchlist="false"
|eval endDate="" 
|table sAMAccountName,personalTitle,displayName,givenName,sn,suffix,mail,telephoneNumber,mobile,manager,priority,department,category,watchlist,whenCreated,endDate, employeeID,lastLogonTimestamp,title
|rename sAMAccountName as identity, personalTitle as prefix, displayName as nick, givenName as first, sn as last, mail as email, telephoneNumber as phone, mobile as phone2, manager as managedBy, department as bunit, whenCreated as startDate
| outputlookup equifax_ad_data.csv

#Generate MineMeld Domain Enterprise Security Threatlist
| `mm_es_gen(domain)` | eval domain=indicator | table description, domain, weight | outputlookup minemeld_domainthreatlist

#Generate MineMeld File Enterprise Security Threatlist
| `mm_es_gen(sha256)` | eval file_hash=indicator | eval file_name=NULL | table description, file_hash, file_name, weight | outputlookup minemeld_filethreatlist

#Generate MineMeld IPv4 Enterprise Security Threatlist
| `mm_es_gen(IPv4)` | eval ip=indicator | table description, ip | outputlookup minemeld_ipv4threatlist

#Generate MineMeld URL Enterprise Security Threatlist
| `mm_es_gen(URL)` | eval url=indicator | eval http_referrer=NULL | eval http_user_agent=NULL | table description, http_referrer, http_user_agent, url, weight | outputlookup minemeld_urlthreatlist

#Get ELS Host
index=efx_* els.host=*
|  stats count by els.host
| outputlookup els_host_count.csv

#Github - raw.githubusercontent.com
(index="efx_wss" OR index="efx_bluecoat" OR index="efx_bluecoat_sslv") "raw.githubusercontent.com" (cs_uri_path!="/uBlockOrigin/*" cs_uri_path!="/" AND cs_uri_path!="*.png" AND cs_uri_path!="*.jpg" AND cs_uri_path!="*.gif" AND cs_uri_path!="*.svg" AND cs_uri_path!="*appcast.xml" AND cs_uri_path!="*adblock*" AND cs_uri_path!="*ublock*" AND cs_uri_path!="/NanoMeow*") | stats count by http_user_agent, cs_uri_path

#HVA_Upload_Report
index=efx_proxy activity=upload (Adam.Idris@equifax.com OR akira.muranaka@equifax.com OR a.muranaka@equifax.com OR Ankush.Prashar@equifax.com OR Arash.Fartashpour@equifax.com OR Aruna.Kolipaka@equifax.com OR benjamin.anderson@equifax.com OR b.anderson@equifax.com OR betty.broyles@equifax.com OR bill.milligan@equifax.com OR blake.cwieka@equifax.com OR Bob.Montgomery@equifax.com OR Brandon.Brown@equifax.com OR b.brown@equifax.com OR Carl.Epperly@equifax.com OR Chaithanya.Patlolla@equifax.com OR Chris.Mathews@equifax.com OR c.mathews@equifax.com OR christian.rojassandoval@equifax.com OR chuck.adams@equifax.com OR DAVE.McCLOSKEY@equifax.com OR David.Cunningham@equifax.com OR Deborah.Tye-Bergan@equifax.com OR diane.lewis@equifax.com OR elaine.hacklander@equifax.com OR Esha.Aggarwal@equifax.com OR Greg.Volner@equifax.com OR Hank.Sauer@equifax.com OR jay.kent@equifax.com OR jeff.havrilla@equifax.com OR joann.kiel@equifax.com OR john.gassett@equifax.com OR julie.hoevel@equifax.com OR j.hoevel@equifax.com OR justin.singleton@equifax.com OR kenneth.nganga@equifax.com OR kim.piatchek@equifax.com OR Marin.Simina@equifax.com OR masami.uemoto@equifax.com OR michael.ayers@equifax.com OR michael.james@equifax.com OR mike.podolski@equifax.com OR Moiz.Khan@equifax.com OR Noel.Cookson@equifax.com OR oscar.murillo@equifax.com OR peter.manzano@equifax.com OR pramod.rao@equifax.com OR Qinlin.Xu@equifax.com OR rashid.khan@equifax.com OR rauleduardo.otegui@equifax.com OR reginald.choates@equifax.com OR rodd.closson@equifax.com OR Sally.Kula@equifax.com OR sireesha.devulapalli@equifax.com OR Stacy.Tolley@equifax.com OR Tamziya.Fathima@equifax.com OR TERRY.MULLINS@equifax.com OR Tony.Dunbar@equifax.com OR Trinna.McIntosh@equifax.com) | stats count by user app

#HVA_Virtru_Send_Report
index="efx_virtru" isSendEvent=true (Adam.Idris@equifax.com OR akira.muranaka@equifax.com OR a.muranaka@equifax.com OR Ankush.Prashar@equifax.com OR Arash.Fartashpour@equifax.com OR Aruna.Kolipaka@equifax.com OR benjamin.anderson@equifax.com OR b.anderson@equifax.com OR betty.broyles@equifax.com OR bill.milligan@equifax.com OR blake.cwieka@equifax.com OR Bob.Montgomery@equifax.com OR Brandon.Brown@equifax.com OR b.brown@equifax.com OR Carl.Epperly@equifax.com OR Chaithanya.Patlolla@equifax.com OR Chris.Mathews@equifax.com OR c.mathews@equifax.com OR christian.rojassandoval@equifax.com OR chuck.adams@equifax.com OR DAVE.McCLOSKEY@equifax.com OR David.Cunningham@equifax.com OR Deborah.Tye-Bergan@equifax.com OR diane.lewis@equifax.com OR elaine.hacklander@equifax.com OR Esha.Aggarwal@equifax.com OR Greg.Volner@equifax.com OR Hank.Sauer@equifax.com OR jay.kent@equifax.com OR jeff.havrilla@equifax.com OR joann.kiel@equifax.com OR john.gassett@equifax.com OR julie.hoevel@equifax.com OR j.hoevel@equifax.com OR justin.singleton@equifax.com OR kenneth.nganga@equifax.com OR kim.piatchek@equifax.com OR Marin.Simina@equifax.com OR masami.uemoto@equifax.com OR michael.ayers@equifax.com OR michael.james@equifax.com OR mike.podolski@equifax.com OR Moiz.Khan@equifax.com OR Noel.Cookson@equifax.com OR oscar.murillo@equifax.com OR peter.manzano@equifax.com OR pramod.rao@equifax.com OR Qinlin.Xu@equifax.com OR rashid.khan@equifax.com OR rauleduardo.otegui@equifax.com OR reginald.choates@equifax.com OR rodd.closson@equifax.com OR Sally.Kula@equifax.com OR sireesha.devulapalli@equifax.com OR Stacy.Tolley@equifax.com OR Tamziya.Fathima@equifax.com OR TERRY.MULLINS@equifax.com OR Tony.Dunbar@equifax.com OR Trinna.McIntosh@equifax.com)
|stats count by timestamp userId violatedRuleNames{}

#HackerOneJQLDaily
|  jira jqlsearch "project = H1 AND Status != Done AND Status!='Award issued'"
| rename Key as Ticket
| rex field=Priority "name\": \"(?<priority>\w*)\""
| rex field=Assignee "displayName\": \"(?<assigned>\w* \w*)"
| rex field=_raw "name\": \"(?<Status>Validation|New Triaged|Backlog|Locating Owner|Ongoing Remediation|Award issued|Closed|Reported To Owner|Done|Reported|In Progress)\""
| eval priorityNumber=case(priority="Critical",1,priority="High",2,priority="Medium",1,priority="Low",0)
| sort - priorityNumber
| eval createdEpoch = strptime(Created,"%Y-%m-%dT%H:%M:%S")
| eval daysopen = round((now() - createdEpoch)/60/60/24,0)
|  table Summary Status assigned priority Ticket daysopen
| rename daysopen as "Days Open"

#HackerOne_SLAS
|  jira jqlsearch "project = H1 AND Status != Done AND Status!='Award issued'"
| rename Key as Ticket
| rex field=Priority "name\": \"(?<priority>\w*)\""
| rex field=Assignee "displayName\": \"(?<assigned>\w* \w*)"
| rex field=_raw "name\": \"(?<Status>Validation|New Triaged|Backlog|Locating Owner|Ongoing Remediation|Award issued|Closed|Reported To Owner|Done|Reported|In Progress)\""
| eval priorityNumber=case(priority="Critical",1,priority="High",2,priority="Medium",1,priority="Low",0)
| sort - priorityNumber
| eval createdEpoch = strptime(Created,"%Y-%m-%dT%H:%M:%S")
| eval daysopen = round((now() - createdEpoch)/60/60/24,0)
|  table Summary Status assigned priority Ticket daysopen
| eval inSLA=case(priority="Critical" AND daysopen > 7,"No",priority="Critical" AND daysopen < 8,"Yes",priority="High" AND daysopen > 30,"No",priority="High" AND daysopen < 31,"Yes",priority="Medium" AND daysopen > 90,"No",priority="Medium" AND daysopen < 91,"Yes",priority="Low" AND daysopen > 180,"No",priority="Low" AND daysopen < 181,"Yes")


#IPS Sensors Reporting(24 Hours)
index=efx_ips sensor=* |stats dc(sensor) as current_reporting_sensors |join type=left [|inputlookup equifax_us_sensors.csv |stats count as all_sensors]

#InTP - Amazon Upload - Analyzing Uploads to #AWS S3 Buckets
index=efx_proxy app="Amazon S3" activity=upload NOT (url="*efx*" OR url="*equifax*") AND NOT (url="articulate-us.s3.amazonaws.com*" OR
url="ba-prod2-s3-workspace.s3.us-east-1.amazonaws.com*" OR
url="coursera-assessments.s3.amazonaws.com*" OR
url="dev-flex-ui-config.s3.eu-west-2.amazonaws.com*" OR
url="dev-nonprod-asm-asmui-scripts.s3.ap-southeast-2.amazonaws.com*" OR
url="eggfile.s3.us-east-1.amazonaws.com*" OR
url="filestack-uploads-persist-production.s3.amazonaws.com*" OR
url="fraudservice-amlconnect-batchfile-conversion-dev.s3.us-east-1.amazonaws.com*" OR
url="fraudservice-amlconnect-customer-batch-prod.s3.us-east-1.amazonaws.com*" OR
url="fraudservice-lumin8-customer-batch-qa.s3.us-east-1.amazonaws.com*" OR
url="intl-coll-nonprod-ca-central-1.s3.ca-central-1.amazonaws.com*" OR
url="intl-coll-nonprod-eu-central-1.s3.eu-central-1.amazonaws.com*" OR
url="intl-coll-nonprod-us-east-1.s3.amazonaws.com*" OR
url="intl-coll-nonprod-us-east-1.s3.us-east-1.amazonaws.com*" OR
url="intl-coll-tf-nonprod-us-east-1.s3.amazonaws.com*" OR
url="intl-iberia-1-odf-output-pa.s3.eu-central-1.amazonaws.com*" OR
url="jnpr-it-prod-case-attachments.s3.amazonaws.com*" OR
url="mapcity-mapdrive.s3-us-west-1.amazonaws.com*" OR
url="prod-asm-asmui-scripts.s3.ap-southeast-2.amazonaws.com*" OR
url="sage3eggfile.s3.us-east-1.amazonaws.com*" OR
url="sage3eggfiles.s3.us-east-1.amazonaws.com*" OR
url="sfsc-case-attachments.s3-accelerate.amazonaws.com*" OR
url="sharedcloud-production-us-east-1-data-temp.s3.amazonaws.com*" OR
url="smarts-documentgroup-poc-2.s3.us-east-1.amazonaws.com*" OR
url="uk-ebi-apiofficers-testrole.s3.eu-west-2.amazonaws.com*" OR
url="uk-ebi-apiofficers-testrole-logs.s3.eu-west-2.amazonaws.com*" OR
url="uk-ebi-inbound-apiofficers-testrole.s3.eu-west-2.amazonaws.com*" OR
url="uk-ebi-officers-npe-tf.s3.eu-west-2.amazonaws.com*" OR
url="wzstats.s3.amazonaws.com*")
|stats count by src_time user hostname object object_type url to_storage

#Latest Report 1 - QBOT QAKBOT Based on Manual Indicators MISPID 65555
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  [| mispgetioc eventid=65555 misp_instance=equifax limit=10000  | search NOT misp_type IN ("text","link","other") | fields misp_value | rename misp_value as search | format] | eval date=strftime(_time,"%F")

#Latest Report 2 - QBOT QAKBOT Post Infection Feed Hunt MISPID 73833
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  [| mispgetioc eventid=73833 misp_instance=equifax limit=10000  | search NOT misp_type IN ("text","link","other") | fields misp_value | rename misp_value as search | format] | eval date=strftime(_time,"%F")

#Latest Report 3 - URLHAUS Feed Hunt MISPID 21611
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  [| mispgetioc eventid=21611 misp_instance=equifax limit=10000  | search NOT misp_type IN ("text","link","other") | fields misp_value | rename misp_value as search | format] | eval date=strftime(_time,"%F")

#Latest Report 4 - LNKR Hunt on Atomic Indicators MISPID 23754
(index=efx_bluecoat OR index=efx_wss OR index=efx_proxy OR index=summary)  [| mispgetioc eventid=23754 misp_instance=equifax limit=10000  | search NOT misp_type IN ("text","link","other") | fields misp_value | rename misp_value as search | format] | eval date=strftime(_time,"%F")

#License Usage Data Cube
index=_internal source=*license_usage.log* type="Usage" | eval h=if(len(h)=0 OR isnull(h),"(SQUASHED)",h) | eval s=if(len(s)=0 OR isnull(s),"(SQUASHED)",s) | eval idx=if(len(idx)=0 OR isnull(idx),"(UNKNOWN)",idx) | bin _time span=1d | stats sum(b) as b by _time, pool, s, st, h, idx

MISP Wildcard Sinkhole Domains
| mispgetioc date_from="2016-01-01" category="Other" type="text" tags="EFX_Wildcard_Sinkhole"
| fields misp_event_id, misp_value, misp_tag, misp_category
| outputlookup misp_wildcard_sinkhole.csv

#MISP_email_intel_last1d
| mispgetioc misp_instance=default_misp last=1d to_ids=t geteventtag=t type="email-src,email-subject" limit=0
| where isnotnull(misp_email_src) or isnotnull(misp_email_subject)
| eval weight=case(match(misp_tag,"tlp:white"),20,match(misp_tag,"tlp:green"),40,match(misp_tag,"tlp:amber"),80,match(misp_tag,"tlp:red"),100,true(),50)
| eval description = "MISP e" + misp_event_id | rename misp_email_src AS src_user misp_email_subject AS subject 
| where isnotnull(src_user) or isnotnull(subject) | fields description,src_user,subject,weight 
| outputlookup misp_email_intel.csv

#MISP_file_intel_last1d
,filename|ssdeep"
| eval description = "e"+ misp_event_id+ "_UUID_" + misp_event_uuid 
| eval description=if(isnotnull(misp_filename),description  + " on " + misp_filename,description) 
| eval description=if(isnotnull(misp_md5),description + " MD5,",description) 
| eval description=if(isnotnull(misp_sha1),description + " SHA1,",description) 
| eval description=if(isnotnull(misp_sha256),description + " SHA256,",description) 
| eval description=if(isnotnull(misp_sha512),description + " SHA512,",description) 
| eval description=if(isnotnull(misp_ssdeep),description + " SSEEEP",description) 
| eval file_hash=mvappend(misp_md5, misp_sha1, misp_sha256, misp_sha512, misp_ssdeep)  
| eval file_hash=coalesce(file_hash,"preserve_single_value_file_hash") 
| mvexpand file_hash 
| eval file_hash=if(file_hash="preserve_single_value_file_hash", null(), file_hash) 
| rename misp_filename AS file_name | where isnotnull(file_name) or isnotnull(file_hash) 
| eval weight=case(match(misp_tag,"tlp:white"),20,match(misp_tag,"tlp:green"),40,match(misp_tag,"tlp:amber"),80,match(misp_tag,"tlp:red"),100,true(),50) 
| fields description,file_hash,file_name,weight 
| outputlookup misp_file_intel.csv

#MISP_getioc_email_related_last1d_to_KV_MISP_email
| mispgetioc misp_instance=default_misp last=1d getuuid=t getorg=t geteventtag=t type="email-attachment,email-src,email-src-display-name,email-subject" limit=0
| where isnotnull(misp_email_attachment) or isnotnull(misp_email_src) or isnotnull(misp_email_src_display_name) or isnotnull(misp_email_subject) | fields - _time, _raw, host 
| outputlookup MISP_email append=true

#MISP_getioc_filename_related_last1d_to_KV_MISP_filename
| mispgetioc misp_instance=default_misp last=1d getuuid=t getorg=t geteventtag=t pipesplit=t limit=0 type="filename,md5,sha1,sha256,sha512,ssdeep,filename|md5,filename|sha1,filename|sha256,filename|sha512,filename|ssdeep" 
| where isnotnull(misp_filename) or isnotnull(misp_md5) or isnotnull(misp_sha1) or isnotnull(misp_sha256) or isnotnull(misp_sha512) or isnotnull(misp_ssdeep) | fields - _time, _raw, host 
| outputlookup MISP_filename append=true

#MISP_getioc_web_related_last1d_to_KV_MISP_web
| mispgetioc misp_instance=default_misp last=1d getuuid=t getorg=t pipesplit=t geteventtag=t type="domain,ip-dst,ip-src,url,user_agent,domain|ip" limit=0
| where isnotnull(misp_domain) or isnotnull(misp_ip_dst) or isnotnull(misp_ip_src) or isnotnull(misp_url) or isnotnull(misp_user_agent) 
| eval misp_user_agent_length=if(isnotnull(misp_user_agent),len(misp_user_agent),'') | fields - _time, _raw, host 
| outputlookup MISP_web append=true

#MISP_http_intel_last1d
| mispgetioc misp_instance=default_misp last=1d to_ids=t geteventtag=t type="url,user_agent" limit=0
| eval description = "e"+ misp_event_id+ "_UUID_" + misp_event_uuid 
| rename misp_user_agent AS http_user_agent, misp_url AS url
| eval weight=case(match(misp_tag,"tlp:white"),20,match(misp_tag,"tlp:green"),40,match(misp_tag,"tlp:amber"),80,match(misp_tag,"tlp:red"),100,true(),50)
| where isnotnull(url) or isnotnull(http_user_agent)| fields description,http_referrer,http_user_agent,url,weight
| outputlookup misp_http_intel.csv

#MISP_ip_intel_last1d
| mispgetioc misp_instance=default_misp last=1d to_ids=t geteventtag=t pipesplit=t type="domain,ip-dst,ip-src,domain|ip" limit=0
| eval description = "e"+ misp_event_id+ "_UUID_" + misp_event_uuid 
| rename misp_domain AS domain
| eval ip = mvappend(misp_ip_dst,misp_ip_src)
| eval ip = coalesce(ip,"preserve_single_value_ip")
| mvexpand ip
| eval ip = if(ip="preserve_single_value_ip", null(), ip)
| eval weight=case(match(misp_tag,"tlp:white"),20,match(misp_tag,"tlp:green"),40,match(misp_tag,"tlp:amber"),80,match(misp_tag,"tlp:red"),100,true(),50)
| where isnotnull(ip) or isnotnull(domain) | fields description,domain,ip,weight
| outputlookup misp_ip_intel.csv

#MSAG Hosts Reporting
|tstats count where index=* [|inputlookup msag.csv] by host
|stats dc(host) AS loggingHosts
|eval percentLogging= ((loggingHosts/8285)*100)
|table percentLogging

#MSAG Linux Hosts Logging
|inputlookup globallinuxhost.csv
|stats count AS GlobalCount
|append [|inputlookup linuxservers.csv | stats count AS TotalCount]
| fillnull value=0
| stats sum(GlobalCount) AS GlobalCount sum(TotalCount) As TotalCount
| eval "MSAG Linux Hosts"=((GlobalCount/TotalCount)*100) 
| table "MSAG Linux Hosts"

#MSAG Windows Hosts Logging
|inputlookup GlobalWinHostLogging.csv
|stats count AS GlobalCount
|append [|inputlookup windowsHost.csv | stats count AS TotalCount]
| fillnull value=0
| stats sum(GlobalCount) AS GlobalCount sum(TotalCount) As TotalCount
| eval "MSAG Windows Hosts"=((GlobalCount/TotalCount)*100) 
| table "MSAG Windows Hosts"

#Open CIRT Incidents
index="efx_demisto"  sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup

by id
| makemv delim="," categories
| search phase!=Closed AND categories!="Threat Hunt*" AND assignmentgroup=CIRT
| rename phase as "Investigation Phase" id AS ID

#Open CIRT Threat Hunts
index="efx_demisto"  sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup

by id
| makemv delim="," categories
| search phase!=Closed AND categories="Threat Hunt*" AND assignmentgroup=CIRT
| rename phase as "Investigation Phase" id AS ID

#Orphaned scheduled searches
| rest timeout=600 splunk_server=local /servicesNS/-/-/saved/searches add_orphan_field=yes count=0 
| search orphan=1 disabled=0 is_scheduled=1 
| eval status = if(disabled = 0, "enabled", "disabled") 
| fields title eai:acl.owner eai:acl.app eai:acl.sharing orphan status is_scheduled cron_schedule next_scheduled_time next_scheduled_time actions 
| rename title AS "search name" eai:acl.owner AS owner eai:acl.app AS app eai:acl.sharing AS sharing

#Previous Day Out of Band - User Creation
index=wineventlog EventCode=4720 
| eval CreatedID=mvindex(Security_ID,1)
| eval CreatedBy=mvindex(Security_ID,0) 
| eval CreatedSam=mvindex(split(CreatedBy,"\\"),1) 
| where (CreatedSam!="iqadmin" AND CreatedSam!="svc_idmadm" AND CreatedSam!="idmadm" AND CreatedSam!="s_iqadmin" AND CreatedSam!="MESHServiceAccount" AND CreatedSam!="iiqadm" AND CreatedSam!="SYSTEM" and CreatedID!="NONE_MAPPED")
| table _time CreatedID CreatedBy

#SI-Domains
(index=efx_bluecoat OR index=efx_wss) NOT (RH_domain=*datadoghq.com OR RH_domain=*rapid7.com OR RH_domain=10.57.248.12 OR RH_domain=*cyberark.com OR RH_domain=*googleapis.com OR RH_domain=10.57.248.11 OR RH_domain="*microsoft.com" OR RH_domain="*windowsupdate.com" OR RH_domain=*equifax.com OR (RH_domain=www.google.com NOT cs_uri_query="*&source=gmail*") OR ([|inputlookup DomainsWhitelist.csv] NOT cs_uri_query="*&source=gmail*")) 
| rex field=_raw "https? (?<RH_domain>[0-9a-zA-Z\-\.]+) \d+ \/" 
| rex field=RH_domain "(?<Domain>[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}$|[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}\.[A-Za-z]{2,6}$|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)"
| rex field=RH_uri "\/(?<filename>[A-Za-z0-9\-_\.]{1,255}$)"
| rex field=_raw "\d{4}\-\d{2}\-\d{2} \d{2}\:\d{2}\:\d{2} [0-9 ]+?(?<RH_src>\d+\.\d+\.\d+\.\d+) "
| rex field=_raw " (?<RH_dst>(?!10\.|192\.168\.|172\.(?:1[6-9]|2[0-9]|3[01])\.)(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}) "
| eval RemoteIP=coalesce(r_ip, RH_dst)
| eval src_ip=coalesce(src, RH_src)
| append [ search (index=efx_wss OR index=efx_bluecoat) cs_uri_query="*&source=gmail*" OR cs_host=protect.fireeye.com OR cs_host=protect2.fireeye.com
| rex field=_raw "https? (?<RH_domain>[0-9a-zA-Z\-\.]+) \d+ \/" 
| rex field=RH_domain "(?<Domain>[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}$|[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}\.[A-Za-z]{2,6}$|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)"
| rex field=RH_uri "\/(?<filename>[A-Za-z0-9\-_\.]{1,255}$)"
| rex field=cs_uri_query "\?q\=(?<GLinkURL>https?:\/\/[A-Za-z0-9\-\.\/%:_?&=]+)(&source=gmail)" 
| rex field=cs_uri_query "&u=(?<FELinkURL>[^ ]+)" 
| rex field=_raw "\d{4}\-\d{2}\-\d{2} \d{2}\:\d{2}\:\d{2} [0-9 ]+?(?<RH_src>\d+\.\d+\.\d+\.\d+) "
| rex field=_raw " (?<RH_dst>(?!10\.|192\.168\.|172\.(?:1[6-9]|2[0-9]|3[01])\.)(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}) "
| eval RemoteIP=coalesce(r_ip, RH_dst)
| eval src_ip=coalesce(src, RH_src)
| eval LinkURL=urldecode(FELinkURL)
| eval LinkURL=coalesce(GLinkURL, FELinkURL)
| fillnull value="-"
| rex field=LinkURL "https?:\/\/(?<LinkDomain>[^\/]+)" 
| rex field=LinkDomain "(?<Domain>[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}$|[A-Za-z0-9_\-]+\.[A-Za-z]{2,6}\.[A-Za-z]{2,6}$|\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$)"
| stats values(src_ip) as EndpointIP dc(src_ip) as EndpointCount values(RH_proto) as Proto values(RH_port) as Port sum(RH_bytes_in) as BytesIn sum(RH_bytes_out) as BytesOut values(RH_ua) as UserAgent values(RH_URLClassification) as URLClassification values(RH_status) as status dc(date_minute) as Minutes values(RH_username) as UserName values(RH_mt) as FileType values(filename) as FileName values(LinkURL) as LinkURL count by Domain Country]
| search NOT Domain="www.google.com"
| iplocation RemoteIP
| fillnull Country, RH_username, RH_mt value="-" | eval Country="\"".Country."\""
| fillnull value="-" | where NOT Domain="-"
| stats values(src_ip) as EndpointIP dc(src_ip) as EndpointCount values(RH_proto) as Proto values(RH_port) as Port sum(RH_bytes_in) as BytesIn sum(RH_bytes_out) as BytesOut values(RH_ua) as UserAgent values(RH_URLClassification) as URLClassification values(RH_status) as status dc(date_minute) as Minutes values(RH_username) as UserName values(RH_mt) as FileType values(filename) as FileName values(LinkURL) as LinkURL values(RemoteIP) as RemoteIP dc(RemoteIP) as IPsPerDomain count by Domain Country
| join type=left Domain
    [| mispgetioc eventid=11856 misp_instance=equifax
| rename misp_domain AS Domain
| eval Domain = if(isNull(Domain),misp_other,Domain)
| fields Domain, misp_event_id]
| lookup misp_wildcard_sinkhole misp_value AS Domain OUTPUTNEW misp_value AS misp_match, misp_value AS wc_misp_value, misp_event_id AS wc_misp_event_id, misp_category AS wc_misp_category, misp_tag AS wc_misp_tag
`comment("use mispsearch to pull back addition attribute metadata from misp, but make sure all Domain have a value, NULLs will break things")`
| fillnull Domain value="-lolwut-"
| mispsearch field=Domain misp_instance=equifax
| eval misp_wildcard=if(isNull(wc_misp_value),"False","True")
| eval cleared=if(misp_event_id=11856,"11856",mvfilter(match("11856",misp_event_id)))
| fillnull cleared value="False"
| eval cleared=if(cleared="11856","True","False")
| eval misp_event_id=coalesce(wc_misp_event_id,misp_event_id)
| eval misp_category=coalesce(wc_misp_category,misp_category)
| eval misp_match=coalesce(wc_misp_value,misp_value)

#SNow vs Demisto - 2019-2020
| inputlookup demisto.csv
| append
	[
		| inputlookup snow_2019-2020.csv
	]

| fillnull value=empty
| rename "Closure Reason" as closure_reason

| eval
demisto_created_epoch = strptime(created, "%a, %d %b %Y %H:%M:%S UTC"),
snow_created_epoch = strptime(sys_created_on, "%Y-%m-%d %T"),
month_str =
	if(
		isnull(demisto_created_epoch),
			strftime(snow_created_epoch, "%b"),
			strftime(demisto_created_epoch, "%b")
	),
month_int =
	if(
		isnull(demisto_created_epoch),
			strftime(snow_created_epoch, "%m"),
			strftime(demisto_created_epoch, "%m")
	),
year =
	if(
		isnull(demisto_created_epoch),
			strftime(snow_created_epoch, "%y"),
			strftime(demisto_created_epoch, "%y")
	),
month_int = year."-".month_int,

demisto_unique =
	if(
		(
			closure_reason="Remediated" OR
			closure_reason="Other" OR
			closure_reason="False Positive"
		),
			1,
			0
	)

| stats
count(eval(id!="empty")) as Demisto
count(eval(number!="empty")) as SNow
count(eval(demisto_unique=1)) as "Demisto unique"
by month_int

#SOC - IPS Top Talker Report
index=efx_ips 
| strcat sid " " msg " --- " action signature_message
| stats values(src_ip) AS src_ip count by event_id sid signature_message action rec_type_simple
| mvexpand src_ip
| stats delim="," values(signature_message) as signature_message count by src_ip 
| sort - count
| head 25
| mvcombine signature_message

#SOC - IPS WAF Correlation
index=efx_f5asm [|inputlookup tempipsResults.csv 
    |  fields src_ip]
| eval sig_names=if(len(sig_names)=0, "No Signature", sig_names) 
| strcat sig_names " -Action Taken by F5- " action " -F5 Response Code- " resp_code f5_signature_message
| iplocation src_ip
| stats values(Country) AS "Source Country" values(host) AS "F5 Host" values(f5_signature_message) AS "F5 Signature"  values(policy_name) AS Policy count by src_ip
| sort - count
| lookup tempipsResults.csv src_ip as src_ip OUTPUT signature_message
| makemv delim="," signature_message
| rename signature_message AS "IPS Rule"

#SOC - eDLP - Data Protection Report
index="efx_mcafeeepo" product="Data Loss Prevention"
signature IN ("* - Monitor", "* - Blocked")
NOT signature IN("Clipboard Protection - Monitor", "Screen Capture Protection - Monitor")
NOT logon_user IN("Administrator", "secscanner", "secscanner,Administrator")
|stats count by user, dest, os, signature, dlp_type, severity, source, action, epo_vendor_action
|sort -count product="Data Loss Prevention"

#SOC - eDLP - Device Protection Report
index="efx_demisto"

| where _indextime > 1595944236

| stats
latest(CustomFields.assignmentgroup) as assignment_group
latest(CustomFields.categories{}) as categories
latest(name) as name
latest(CustomFields.summary) as summary
latest(created) as created
latest(CustomFields.alertsource{}) as alert_source
latest(sourceInstance) as source_instance
latest(CustomFields.investigationphase) as investigation_phase
latest(CustomFields.closurereason) as closure_reason
by id

| fillnull value=EMPTY

| where
assignment_group="SOC" AND
categories!="End User Security" AND
investigation_phase!="New" AND
closure_reason!="Duplicate" AND
source_instance!="FireEye ETP Quarantine"

| eval
alert_source_backup = alert_source,
alert_source = lower(alert_source),
order =
	case(
		alert_source LIKE "etp","1-Phishing",
		alert_source LIKE "phishme", "1-Phishing",
		alert_source LIKE "g suite", "1-Phishing",
		alert_source LIKE "hx", "2-HX", 
		alert_source LIKE "anti-virus", "2-Malware",
		alert_source LIKE "siem", "3-SIEM"
	)

| sort
by order

| table
id,
name,
created,
summary

| rename
id as "Incident's ID"
name as "Alert's name"
created as "Created on"
summary as Summary

#SOC's Updates for CTC's Daily Sync Call - Afternoon Shift - T..F
index="efx_demisto"

| where _indextime > 1595944236

| stats
latest(CustomFields.assignmentgroup) as assignment_group
latest(CustomFields.categories{}) as categories
latest(name) as name
latest(CustomFields.summary) as summary
latest(created) as created
latest(CustomFields.alertsource{}) as alert_source
latest(sourceInstance) as source_instance
latest(CustomFields.investigationphase) as investigation_phase
latest(CustomFields.closurereason) as closure_reason
by id

| fillnull value=EMPTY

| where
assignment_group="SOC" AND
categories!="End User Security" AND
investigation_phase!="New" AND
closure_reason!="Duplicate" AND
source_instance!="FireEye ETP Quarantine"

| eval
alert_source_backup = alert_source,
alert_source = lower(alert_source),
order =
	case(
		alert_source LIKE "etp","1-Phishing",
		alert_source LIKE "phishme", "1-Phishing",
		alert_source LIKE "g suite", "1-Phishing",
		alert_source LIKE "hx", "2-HX", 
		alert_source LIKE "anti-virus", "2-Malware",
		alert_source LIKE "siem", "3-SIEM"
	)

| sort
by order

| table
id,
name,
created,
summary

| rename
id as "Incident's ID"
name as "Alert's name"
created as "Created on"
summary as Summary

#SOC's Updates for CTC's Daily Sync Call - Afternoon Shift - Weekends
index="efx_demisto"

| where _indextime > 1595944236

| stats
latest(CustomFields.assignmentgroup) as assignment_group
latest(CustomFields.categories{}) as categories
latest(name) as name
latest(CustomFields.summary) as summary
latest(created) as created
latest(CustomFields.alertsource{}) as alert_source
latest(sourceInstance) as source_instance
latest(CustomFields.investigationphase) as investigation_phase
latest(CustomFields.closurereason) as closure_reason
by id

| fillnull value=EMPTY

| where
assignment_group="SOC" AND
categories!="End User Security" AND
investigation_phase!="New" AND
closure_reason!="Duplicate" AND
source_instance!="FireEye ETP Quarantine"

| eval
alert_source_backup = alert_source,
alert_source = lower(alert_source),
order =
	case(
		alert_source LIKE "etp","1-Phishing",
		alert_source LIKE "phishme", "1-Phishing",
		alert_source LIKE "g suite", "1-Phishing",
		alert_source LIKE "hx", "2-HX", 
		alert_source LIKE "anti-virus", "2-Malware",
		alert_source LIKE "siem", "3-SIEM"
	)

| sort
by order

| table
id,
name,
created,
summary

| rename
id as "Incident's ID"
name as "Alert's name"
created as "Created on"
summary as Summary

#SOC's Updates for CTC's Daily Sync Call - Morning Shift - T..F
index="efx_demisto"

| where _indextime > 1595944236

| stats
latest(CustomFields.assignmentgroup) as assignment_group
latest(CustomFields.categories{}) as categories
latest(name) as name
latest(CustomFields.summary) as summary
latest(created) as created
latest(CustomFields.alertsource{}) as alert_source
latest(sourceInstance) as source_instance
latest(CustomFields.investigationphase) as investigation_phase
latest(CustomFields.closurereason) as closure_reason
by id

| fillnull value=EMPTY

| where
assignment_group="SOC" AND
categories!="End User Security" AND
investigation_phase!="New" AND
closure_reason!="Duplicate" AND
source_instance!="FireEye ETP Quarantine"

| eval
alert_source_backup = alert_source,
alert_source = lower(alert_source),
order =
	case(
		alert_source LIKE "etp","1-Phishing",
		alert_source LIKE "phishme", "1-Phishing",
		alert_source LIKE "g suite", "1-Phishing",
		alert_source LIKE "hx", "2-HX", 
		alert_source LIKE "anti-virus", "2-Malware",
		alert_source LIKE "siem", "3-SIEM"
	)

| sort
by order

| table
id,
name,
created,
summary

| rename
id as "Incident's ID"
name as "Alert's name"
created as "Created on"
summary as Summary

#SOC's Updates for CTC's Daily Sync Call - Morning Shift - Weekends


#Server Index - WAS Inventory Lookup
sourcetype="ibm:was:serverIndex" | sort source, server_name | rex field=source "cells\/(?<cell>[^\/]+)" | eval as_host=if(isnull(as_host),"-",as_host) |  eval as_port= if(isnull(as_port),"-",as_port) | eval application_server=if((as_host != "*" and as_host != "-"), as_host, host) . "|" . "WebSphere Application Server" . "|" . as_port | eval server_name_part = "*"+server_name+"*" |  mvexpand application_name | eval application_instance = application_server . "|" . application_name | dedup host source server_name application_name | append [|inputlookup ibm_was_inventory | eval _time=relative_time(now(),"-1y") ] | stats latest(cell) as cell, latest(as_port) as as_port, latest(as_host) as as_host, latest(application_server) as application_server,latest(server_name_part) as server_name_part, latest(application_instance) AS application_instance by host, source, server_name, application_name | table cell, source, host, as_port, server_name, as_host, application_server, application_name, server_name_part, application_instance | outputlookup ibm_was_inventory


#ServiceNow CMDB CI App Servers
eventtype=snow_cmdb_ci_app_server | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_app_server_lookup | dedup sys_id | outputlookup snow_cmdb_ci_app_server_lookup


#ServiceNow CMDB CI Database Instances
eventtype=snow_cmdb_ci_db_instance | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_db_instance_lookup | dedup sys_id | outputlookup snow_cmdb_ci_db_instance_lookup


#ServiceNow CMDB CI Infra Services
eventtype=snow_cmdb_ci_infra_service | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_infra_service_lookup | dedup sys_id | outputlookup snow_cmdb_ci_infra_service_lookup


#ServiceNow CMDB CI List
eventtype=snow_cmdb_ci_list | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_list_lookup | dedup sys_id | outputlookup snow_cmdb_ci_list_lookup


#ServiceNow CMDB CI Relation
eventtype=snow_cmdb_rel_ci | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_rel_ci_lookup | dedup sys_id | outputlookup snow_cmdb_rel_ci_lookup


#ServiceNow CMDB CI Server
eventtype=snow_cmdb_ci_server | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_server_lookup | dedup sys_id | outputlookup snow_cmdb_ci_server_lookup


#ServiceNow CMDB CI Services
eventtype=snow_cmdb_ci_service | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_service_lookup | dedup sys_id | outputlookup snow_cmdb_ci_service_lookup


#ServiceNow CMDB CI VM
eventtype=snow_cmdb_ci_vm | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmdb_ci_vm_lookup | dedup sys_id | outputlookup snow_cmdb_ci_vm_lookup


#ServiceNow CNM Location List
eventtype=snow_sys_choice_list name="incident" element="state" | eval incident_state_name=label | eval state=value | eval incident_state=value| dedup state, incident_state, incident_state_name | table state, incident_state, incident_state_name| inputlookup append=t snow_incident_state_lookup | dedup state | sort + state | outputlookup snow_incident_state_lookup


#ServiceNow Incident State
eventtype=snow_cmn_location_list | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_cmn_location_list_lookup | dedup sys_id | outputlookup snow_cmn_location_list_lookup


#ServiceNow Sys Choice List
eventtype=snow_sys_choice_list  | table name, element, value, sys_id | inputlookup append=t snow_sys_choice_list_lookup | dedup sys_id | sort + name, element | outputlookup snow_sys_choice_list_lookup


#ServiceNow Sys User Group List
eventtype=snow_sys_user_group_list | dedup sys_id | fields - _bkt, _cd,_indextime,_kv,_raw,_serial,_si,_sourcetype,_subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_sys_user_group_list_lookup | dedup sys_id | outputlookup snow_sys_user_group_list_lookup


#ServiceNow Sys User List
eventtype=snow_sys_user_list | dedup sys_id | fields - _bkt, _cd, _indextime, _kv, _raw, _serial, _si, _sourcetype, _subsecond, punct, index, source, sourcetype  | inputlookup append=t snow_sys_user_list_lookup | dedup sys_id | outputlookup snow_sys_user_list_lookup


#SinkholeSingleValue
comment("Build the initial list of sinkhole hits that don't match attributes from MISP 11856")` 
index=efx_sinkhole
| join type=left Host_Requested 
    [| mispgetioc eventid=11856 
| rename misp_domain AS Host_Requested
| rex field=misp_value "https?://(?<Host_Requested>[^/]*)(?<First_Line>.*$)" 
| eval First_Line="*".First_Line."*"
| eval Host_Requested = if(isNull(Host_Requested),misp_other,Host_Requested) 
| fields First_Line, Host_Requested, misp_event_id]
`comment("Perform a lookup against the compiled list of wildcard sinkhole entries and output useful stuff")` 
| lookup misp_wildcard_sinkhole.csv misp_value AS Host_Requested OUTPUTNEW misp_value AS misp_match, misp_value AS wc_misp_value, misp_event_id AS wc_misp_event_id, misp_category AS wc_misp_category, misp_tag AS wc_misp_tag
`comment("use mispsearch to pull back addition attribute metadata from misp, but make sure all Host_Requested have a value, NULLs will break things")` 
| fillnull Host_Requested value="-lolwut-"
| mispsearch field=Host_Requested
`comment("Set misp_wildcard to true if there's a value in wc_misp_value. Set cleared to True if the event ID is 11856 (whitelist MISP event)")`
| eval misp_wildcard=if(isNull(wc_misp_value),"False","True")
| eval cleared=if(misp_event_id=11856,"11856",mvfilter(match("11856",misp_event_id)))
| fillnull cleared value="False"
| eval cleared=if(cleared="11856","True","False")
`comment("Combine the wildcard lookup and mispsearch output. If it was found in the wildcard list, ignore everything other than the fact it was a wildcard hit")`
| eval misp_event_id=coalesce(wc_misp_event_id,misp_event_id)
| eval misp_category=coalesce(wc_misp_category,misp_category)
| eval misp_match=coalesce(wc_misp_value,misp_value)
`comment("Parse out the file extension")`
| rex field=First_Line " (?<uri>/[^ \?]*)"
| rex field=uri "(?<file_ext>\..*)"
| stats count by Host_Requested misp_event_id
| sort -count
| stats sum(count)


#SinkholeTable
`comment("Build the initial list of sinkhole hits that don't match attributes from MISP 11856")` 
index=efx_sinkhole
| join type=left Host_Requested 
    [| mispgetioc eventid=11856 
| rename misp_domain AS Host_Requested
| rex field=misp_value "https?://(?<Host_Requested>[^/]*)(?<First_Line>.*$)" 
| eval First_Line="*".First_Line."*"
| eval Host_Requested = if(isNull(Host_Requested),misp_other,Host_Requested) 
| fields First_Line, Host_Requested, misp_event_id]
`comment("Perform a lookup against the compiled list of wildcard sinkhole entries and output useful stuff")` 
| lookup misp_wildcard_sinkhole misp_value AS Host_Requested OUTPUTNEW misp_value AS misp_match, misp_value AS wc_misp_value, misp_event_id AS wc_misp_event_id, misp_category AS wc_misp_category, misp_tag AS wc_misp_tag
`comment("use mispsearch to pull back addition attribute metadata from misp, but make sure all Host_Requested have a value, NULLs will break things")` 
| fillnull Host_Requested value="-lolwut-"
| mispsearch field=Host_Requested
`comment("Set misp_wildcard to true if there's a value in wc_misp_value. Set cleared to True if the event ID is 11856 (whitelist MISP event)")`
| eval misp_wildcard=if(isNull(wc_misp_value),"False","True")
| eval cleared=if(misp_event_id=11856,"11856",mvfilter(match("11856",misp_event_id)))
| fillnull cleared value="False"
| eval cleared=if(cleared="11856","True","False")
`comment("Combine the wildcard lookup and mispsearch output. If it was found in the wildcard list, ignore everything other than the fact it was a wildcard hit")`
| eval misp_event_id=coalesce(wc_misp_event_id,misp_event_id)
| eval misp_category=coalesce(wc_misp_category,misp_category)
| eval misp_match=coalesce(wc_misp_value,misp_value)
`comment("Parse out the file extension")`
| rex field=First_Line " (?<uri>/[^ \?]*)"
| rex field=uri "(?<file_ext>\..*)"
| stats count by Host_Requested misp_event_id
| sort -count


#Slideshow Views Supportability
| rest /services/data/ui/views  | eval sharing='eai:acl.sharing' | eval possible_issue="" | eval possible_issue=if(sharing=="app", "View is not shared", possible_issue) | eval possible_issue=if('eai:acl.perms.read' == "*", possible_issue, "View is not readable by all users") | eval possible_issue=if(isVisible=0,"View is set to invisible", possible_issue) | eval possible_issue=if(like('eai:data', "%type=\"redirect\"%"),"View is just a redirect", possible_issue) | eval warnings=if(possible_issue=="","no", "yes") | eval possible_issue=if(possible_issue == "", "No issues noted", possible_issue) | table title warnings possible_issue


#Splunk Ingest GB Base Search
index=_internal host=splkdslm101.sec.equifax.com source=*license_usage.log type=Usage
    | eval GB = b/1024/1024/1024
    | bucket _time span=1d
| stats sum(GB) as GB by idx pool _time
| sort - GB
| eval GB = round(GB,2)
| eval idxGB = idx + " " + GB


#Splunk KPIs - In Depth Index Stats
| tstats count earliest(_time) as et where index=* by index _time span=1day
| convert ctime(et) as et
| chart sum(count) over _time by index limit=100


#Splunk KPIs - In Depth Index Stats - Monthly
| tstats count earliest(_time) as et where index=* by index _time span=1mon
| convert ctime(et) as et
| chart sum(count) over _time by index limit=100


#Splunk KPIs: Max EPS By Week
| tstats count where index=efx_* OR index=wineventlog by _time index  span=1s
| eventstats sum(count) as max by _time
| eval indexCount=index + ":" + count
| eval maxTime = _time
| stats values(maxTime) as maxTime values(indexCount) as indexCount max(max) as max by _time
| mvcombine delim="," indexCount
| sort - max
| head 1
| convert ctime(maxTime)
| eval timeToDisplay=now()
| convert ctime(timeToDisplay)
| fields timeToDisplay maxTime indexCount max
| tstats count where index=efx_* OR index=wineventlog by _time span=7d


#Splunk KPIs: Total Events By Week
| tstats count where index=efx_* OR index=wineventlog by _time span=7d


#Splunk KPIs: Total Events Last Month
| tstats count where index=efx_* OR index=wineventlog


#Suspicious Web Activity - C2 or Malware download
index=efx_bluecoat NOT (RH_uri="/" OR RH_mt="image/*" OR cs_uri_extension=gif OR cs_uri_extension="-" OR RH_mt="text/javascript" OR RH_mt="application/javascript" OR RH_mt="application/json" OR RH_domain="10.0.0.0/8")
| rex field=_raw "https? (?<RH_domain>[0-9a-zA-Z\-\.]+) \d+ \/" 
| rex field=_raw "\s(?<RH_mtd>GET|POST|PUT|HEAD|DELETE|CONNECT|OPTIONS|TRACE|TUNNEL)\s"
| rex field=_raw  "\s(?<RH_uri>\/([A-Za-z0-9\-\._~:\/?#\[\]@!$&'\(\)*+,;=]+)?)\s"
| rex field=_raw "^[A-Za-z0-9:\- ]{20} \d+ (?<RH_src_ip>\d+\.\d+\.\d+\.\d+)"
| rex field=_raw "\s(?<RH_username>[a-zA-Z]x[a-zA-Z]\d+|[a-zA-Z0-9][a-zA-Z0-9\-]+\$|[a-z]\-[a-zA-Z]x[a-zA-Z]\d+)\s"
| rex field=_raw "\s[A-Za-z0-9\-\.][A-Za-z0-9\-\.]+ (?<RH_dst_ip>-|\d+\.\d+\.\d+\.\d+)"
| rex field=_raw "\s[A-Z]+ (?<RH_URLClassification>\"[^\"]+\")\s"
| rex field=_raw "\s(?<RH_url>-|((https?|ftps?):\/\/[A-Za-z0-9\-\._~:\/?#\[\]@!$&'\(\)*+,;=]+))\s"
| rex field=_raw "\s(?<RH_status>(20[0-8])|226|(30[0-8])|(4[0-2][0-9])|431|444|449|450|451|499|(50[0-9])|511|598|599)\s"
| rex field=_raw "\s(?<RH_mt>[a-z]+\/[A-Za-z0-9\-\._~:?#\[\]@!$&'\(\)*+,;=]+)\s"
| rex field=_raw "\s\/[^\"]+(?<RH_ua>\"[^\"]+\") [^\"]+\"[^\"\.]+\"\s"
| rex field=_raw "\s(?<RH_proto>ssl|tcp|https?|ftps?) [A-Za-z0-9\-\.][A-Za-z0-9\-\.]+ (?<RH_port>-|\d+)\s"
| rex field=_raw "(\d+\.\d+\.\d+\.\d+|[A-Z_]+) (?<RH_bytes_in>\d+) (?<RH_bytes_out>\d+) (\-|GET|POST|PUT|HEAD|DELETE|CONNECT|OPTIONS|TRACE|TUNNEL|$)"
| stats dc(RH_uri) as uri_count dc(RH_src_ip) as srcip_count values(RH_src_ip) as srcip values(RH_status) as status values(RH_ua) as ua values(RH_mtd) as mtd values(RH_mt) as MIME_Type values(RH_proto) as proto values(RH_port) as port values(RH_username) as username values(RH_bytes_in) as bytesin values(RH_bytes_out) as bytesout values(RH_uri) as uri values(_raw) as Raw count by RH_domain RH_URLClassification
| where uri_count=1 AND srcip_count<4



#TH-DD-008 - Beaconing detection, v1
index=summary search_name="SI-Domains*" EndpointCount<4
| eval DayTime=date_mday.date_hour | eval EndpointIP=split(EndpointIP," ") | eval Country=split(Country," ") | eval UserName=split(UserName," ") 
| stats values(EndpointIP) as "Source IP" dc(EndpointIP) as EndpointIPCount sum(BytesIn) as BytesIn sum(BytesOut) as BytesOut dc(date_hour) as HourCount dc(date_mday) as DayCount dc(DayTime) as HitCount values(URLClassification) as URLClassification values(Country) as Country values(status) as status values(UserName) as UserName dc(Minutes) as Minutes count by Domain EndpointCount
| eval Delta=round((((BytesOut-BytesIn)/EndpointIPCount)/(1024*1024)),2)
| table Domain Country status URLClassification HitCount HourCount DayCount Minutes Delta "Source IP" EndpointIPCount UserName BytesIn BytesOut
| search NOT (Domain="149.97.128.0/17" OR Domain="107.23.74.206" OR Domain="149.96.0.0/16" OR Domain="207.126.240.0/20" OR Domain="34.192.0.0/10" OR Domain="52.0.0.0/11" OR Domain="54.160.0.0/12" OR Domain="52.192.0.0/11" OR Domain="54.144.0.0/12" OR Domain="52.32.0.0/11" OR Domain="52.32.0.0/11" OR Domain="52.64.0.0/12" OR Domain="52.84.0.0/14" OR Domain="52.88.0.0/13" OR Domain="54.200.0.0/14" OR Domain="54.210.0.0/15" OR Domain="54.236.0.0/15" OR Domain="54.244.0.0/16" OR Domain="54.64.0.0/13" OR Domain="54.72.0.0/13" OR Domain="54.80.0.0/12")
| sort -HitCount


#TH-DD-011 - Newly seen domains
index=summary search_name="SI-Domains" NOT Domain="172.16.0.0/12"
| stats earliest(_time) as Date by Domain
| eval Today=strftime(now(), "%y-%m-%d") , Date=strftime(Date,"%y-%m-%d") | where Date=Today | table Domain
| join Domain [search index=summary search_name="SI-Domains" NOT Domain="172.16.0.0/12" earliest=@d 
| rex field=Domain "(?<Domain_root>((www\.)?[A-Za-z0-9\-]+\.([A-Za-z]{2,3}\.)?[A-Za-z0-9\-]+$)|\d+\.\d+(\d+\.\d+\.)?)" |eval DomainLength=len(Domain) | fillnull Domain_root, FileName value="-"
| table Domain Country EndpointIP URLClassification StatusCode DomainLength Domain_root FileName FileType]
| eval StatusCode=split(status," "), EndpointIP=split(EndpointIP," "), Country=split(Country,"\""), FileName=split(FileName," "), FileType=split(FileType," ")
| stats values(Country) as Country dc(EndpointIP) as EndpointCount values(URLClassification) as URLClassification values(StatusCode) as StatusCode values(DomainLength) as DomainLength values(Domain) as Domain count(Domain_root) as SubdomainCount values(FileName) as FileName dc(FileName) as FileCount values(FileType) as FileType count by Domain_root
| eval Country=trim(Country,"\"")


TH-DD-011-NSD
index=summary search_name="SI-Domains*" NOT Domain="172.16.0.0/12" 
| stats earliest(_time) as Date by Domain 
| eval RunDay=relative_time(now(), "-1d@d")
| where Date>RunDay 
| eval Domain=trim(Domain,"-")
| stats count by Domain


#Tanium_AU_stakeholder_report
index=efx_tanium BAP=bap0001486 OR BAP=bap0001702 OR BAP=bap0003308 OR BAP=bap0003992 OR BAP=bap0004869 OR BAP=bap0005632 OR BAP=bap0003615 OR BAP=bap0006351 OR BAP=bap0005964 OR BAP=bap0003351


#Top Bluecoat Messages
index=efx_bluecoat_sslv sourcetype="bluecoat:sslv" |top message showperc=t showcount=t | search message="Invalid MAC*" |eval percent= (percent*100)


#TrendingBlocksDashboard_IPSBlocks24
index=efx_ips (blocked=1 OR blocked=2 OR blocked=Yes)
| eval blocked=case(blocked="1","Blocked",blocked=2,"Blocked", blocked="Yes", "Blocked")
| where NOT isnull(blocked)
| stats count


#TrendingBlocksDashboard_IPSBlocks
index=efx_ips (blocked=1 OR blocked=2 OR blocked=Yes)
| eval blocked=case(blocked="1","Blocked",blocked=2,"Blocked", blocked="Yes", "Blocked")
| where NOT isnull(blocked)
| stats count

TrendingBlocksDashboard_IPSBlocksGeo
index=efx_ips blocked=1 OR blocked=2
| eval blocked=case(blocked="1","Blocked",blocked=2,"Blocked")
| where NOT isnull(blocked)
| iplocation src_ip
| geostats count latfield=lat longfield=lon


#TrendingBlocksDashboard_IPSTrend
index=efx_ips blocked=1 OR blocked=2
| eval blocked=case(blocked="1","Blocked",blocked=2,"Blocked")
| where NOT isnull(blocked)
| timechart span=1h count by blocked


#US ATL Splunk Unique Hosts
|inputlookup us_splunk_unique_hosts.csv


#Unassigned Tickets
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id
| fillnull
| eval Owner = if(len('Owner') == 0, "None", 'Owner')
| search phase!=Closed AND assignmentgroup=CIRT AND Owner=None
| stats count


#Unique Hosts - 24 hours
| metadata type=hosts index=*
|append
    [inputlookup els_host_count.csv 
    |  rename els.host as host, count as totalCount] |fields host totalCount 
    | outputlookup us_splunk_unique_hosts.csv


#VisibilityDiagram
| makeresults count=28
| streamstats count as id
| eval from=case(
id=1,  "Data Lake",
id=2,  "Legacy HF",
id=3,  "API Call/UF",

id=4,  "efx_tacacs",
id=5,  "efx_symdlp",
id=6,  "efx_symsep", 
id=7, "efx_bluecoat_sslv",
id=8, "efx_c3m_prod",
id=9, "efx_gcp_cloudaudit",
id=10, "firewall_panorama",
id=11, "firewall_checkpoint",
id=12, "firewall_juniper",
id=13, "aruba",
id=14, "corelight",
id=15, "qualys",

id=16, "efx_os_nix",
id=17, "efx_infoblox",
id=18, "efx_bluecoat",
id=19, "efx_ciscoasa",
id=20, "efx_f5asm",
id=21, "efx_sinkhole",
id=22, "efx_proxy",

id=23, "efx_ips", 
id=24, "efx_mcafeeepo",
id=25, "wineventlog",
id=26, "efx_fireeye",
id=27, "dhcp")

| eval to=case(
id=1,  "Splunk",
id=2,  "Splunk",
id=3,  "Splunk",

id=4,  "Data Lake",
id=5,  "Data Lake",
id=6,  "Data Lake",
id=7, "Data Lake",
id=8, "Data Lake",
id=9, "Data Lake",
id=10, "Data Lake",
id=11, "Data Lake",
id=12, "Data Lake",
id=13, "Data Lake",
id=14, "Data Lake",
id=15, "Data Lake",

id=16, "Legacy HF",
id=17, "Legacy HF",
id=18, "Legacy HF",
id=19, "Legacy HF",
id=20, "Legacy HF",
id=21, "Legacy HF",

id=22, "API Call/UF",
id=23, "API Call/UF",
id=24, "API Call/UF",
id=25, "API Call/UF",
id=26, "API Call/UF",
id=27, "API Call/UF" )

| eval value=case(
id=1,  "Data Lake",
id=2,  "Legacy HF",
id=3,  "API Call/UF",

id=4,  "efx_tacacs",
id=5,  "efx_symdlp",
id=6,  "efx_symsep", 
id=7, "efx_bluecoat_sslv",
id=8, "efx_c3m_prod",
id=9, "efx_gcp_cloudaudit",
id=10, "firewall_panorama",
id=11, "firewall_checkpoint",
id=12, "firewall_juniper",
id=13, "aruba",
id=14, "corelight",
id=15, "qualys",

id=16, "efx_os_nix",
id=17, "efx_infoblox",
id=18, "efx_bluecoat",
id=19, "efx_ciscoasa",
id=20, "efx_f5asm",
id=21, "efx_sinkhole",
id=22, "efx_proxy",

id=23, "efx_ips", 
id=24, "efx_mcafeeepo",
id=25, "wineventlog",
id=26, "efx_fireeye",
id=27, "dhcp")

| eval type=case(
id=1, "server",
id=2, "cloud",
id=3, "cloud",

id=4, "server",
id=5, "database", 
id=6, "cloud", 
id=7, "server",
id=8, "cloud",
id=9, "cloud",
id=10, "cloud",
id=11, "server",
id=12, "server",
id=13, "server",
id=14, "server",
id=15, "server",

id=16, "server",
id=17, "server",
id=18, "server",
id=19, "server",
id=20, "server",
id=21, "server",
id=22, "server",

id=23, "server",
id=24, "server",
id=25, "server",
id=26, "database",
id=27, "server")

| join type=left
    [| tstats latest(_time) as lt where index="efx_*" OR index=wineventlog OR index="firewall*" OR index=aruba OR index=corelight OR index=dhcp OR index=qualys OR index=dhcp by index
    | rename index as value]
| lookup visibilitydiagram.csv index AS value OUTPUT yesterday lastWeekYesterday change
| eval lt = if(isnull(lt),1,lt)
| eval color=case(relative_time(now(), "-2h") > lt,"red",change < -75,"blue", change <-50, "purple", change < -25,"yellow",1=1,"green")

|eval color=case(value="GCP - Stack Driver", "green", 1==1,color)
|eval color=case(value="API Call/UF", "green", 1==1, color)
|eval color=case(value="Legacy HF","green", 1==1, color)
|eval color=case(value="Splunk", "green",1==1, color)
|eval color=case(value="Data Lake","green", 1==1,color)


#all_syslog_count_day
| tstats count WHERE index=* source="/mnt/logs*" by _time span=1d | timechart span=1d sum(count) as count


#cirt_incidents_dash
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id


#cirt_incidents_dash(24h)
index="efx_demisto" sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| makemv delim="," categories
| mvexpand categories
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup
latest(CustomFields.investigationseverity) as SEV

by id


#cirt_open_tickets
index="efx_demisto"  sourcetype=demisto
| rename "CustomFields.categories{}" AS categories
| eval categories = mvjoin(categories, ",")
| stats 
latest(name) as Name
latest(categories) as categories
latest(owner) as Owner
latest(created) as Created
latest(modified) as Modified
latest(CustomFields.investigationphase) as phase
latest(CustomFields.investigationseverity) as "Investigation Severity"
latest(CustomFields.alertsource{}) as "Alert Source"
latest(CustomFields.assignmentgroup) as assignmentgroup

by id
